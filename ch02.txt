<2.1 서버 간 통신>
서버 간 통신: 한 서버가 다른 서버에 통신을 요청하는 것  서버<->클라이언트 구조
포털 사이트를 하나의 서비스 단위로 개발하면 서버를 업데이트, 유지보수 할 때마다 ‘사이트 작업 중’이라는 팻말을 걸고 작업해야 하고, 서비스를 구동하는 데 걸리는 시간 길어짐
->마이크로서비스 아키텍처(MSA: Microservice Architecture): 서비스 규모를 작게 나누어 구성한 아키텍처
단일 서비스 A 포털 사이트-내부 메서드 호출 등 원하는 자원을 가져와 사용 가능. 하지만 독립적인 애플리케이션을 개발하게 되면 각 서비스 간에 통신해야 하는 경우 발생 ex) 블로그 기능 사용을 위해 로그인을 거쳐야만 함(서버 간 통신)
마이크로서비스 B 포털 사이트—서비스 기능별로 구분되어 있음. 

<2.2 스프링 부트의 동작 방식>
기본적으로 톰캣(Tomcat)을 사용하는 스프링 MVC 구조를 기반으로 동작함.
서블릿(Servlet): 클라이언트의 요청을 처리, 결과를 반환하는 자바 웹 프로그래밍 기술
               서블릿 컨테이너(Servlet Container)에서 관리함.
               스프링에서는 DispatcherServlet이 서블릿의 역할을 수행함.
서블릿 컨테이너(Servlet Container): 서블릿 인스턴스 생성, 관리.
톰캣: WAS의 역할과 서블릿 컨테이너의 역할을 수행하는 대표적인 컨테이너

서블릿 컨테이너의 특징
1.서블릿 객체를 생성, 초기화, 호출, 종료하는 생명주기를 관리
2.서블릿 객체는 싱글톤 패턴으로 관리됨
3.멀티 스레딩을 지원함

-핸들러 매핑
핸들러 매핑 인터페이스의 대표적인 구현체 클래스

<2.3 레이어드 아키텍처>
레이어드 아키텍처(Layered Architecture)란? 
:애플리케이션의 컴포넌트를 유사 관심사를 기준으로 레이러로 묶어 수평적으로 구성한 구조
일반적으로 3계층 혹은 4계층

레이어드 아키텍처 기반 설계의 특징
-각 레이어는 가장 가까운 하위 레이어의 의존성을 주입받음
-각 레이어는 관심사에 따라 묶여 있으며, 다른 레이어의 역할을 침범하지 않음
 •각 컴포넌트의 역할이 명확하므로 코드의 가독성과 기능 구현에 유리함
 •코드의 확장성 향상
-각 레이어가 독립적으로 작성되면 다른 레이어와의 의존성을 낮춰 단위 테스트에 용이
스프링 부트에서는 스프링 MVC 구조를 띤다.

스프링의 레이어드 아키텍처
-상황에 따라 유저 인터페이스(UI:User Interface) 계층이라고도 함
-클라이언트와의 접점
-클라이언트로부터 데이터와 함께 요청을 받고 처리 결과를 응답으로 전달하는 역할

비즈니스 계층
-상황에 따라 서비스 계층이라고도 함
-핵심 비즈니스 로직을 구현하는 영역
-트랜잭션 처리나 유효성 검사 등의 작업 수행

데이터 접근 계층
-상황에 따라 영속(Persistence) 계층이라고도 함
-데이터베이스에 접근해야 하는 작업 수행
-그림 2.6에는 DAO라는 컴포넌트를 표현했지만 Spring Data JPA에서는 DAO 역할을 리포지토리가 수행하기 때문에 리포지토리로 대체 가능

<2.4 디자인 패턴>
디자인 패턴은 소프트웨어를 설계할 때 자주 발생하는 문제들을 해결하기 위해 고안된 해결책
-2.4.1 디자인 패턴 종류
GoF 디자인 패턴이란? ‘Gang of Four’, 디자인 패턴을 구체화해서 정리한 대표적인 분류 방식

생성패턴:객체 생성에 사용되는 패턴. 객체를 수정해도 호출부가 영향을 받지 않게 함
구조패턴:객체를 조합해서 더 큰 구조를 만드는 패턴
행위패턴:객체 간의 알고리즘이나 책임 분배에 관한 패턴. 객체 하나로는 수행할 수 없는 작업을 여러 객체를 이용해 작업 분배

-2.5.1 REST란?
‘Representational State Transfer’
WWW과 같은 분산 하이퍼미디어 시스템 아키텍처의 한 형식
주고받는 자원에 이름을 규정, URI에 명시해 HTTP 메서드(GET, POST, PUT, DELETE)를 통해 해당 자원의 상태를 주고받는 것
-2.5.3 REST API란?
API=’Application Programming Interface’. 애플리케이션에서 제공하는 인터페이스
REST API란 REST 아키텍처를 따르는 시스템/애플리케이션 인터페이스
-2.5.3 REST 특징
유니폼 인터페이스- ‘일관된 인터페이스’. 플랫폼 및 기술에 종속되지 않고 타 언어, 플랫폼, 기술 등과 호환해 사용할 수 있음 

무상태성- 무상태성이란? 서버에 상태 정보를 따로 보관하거나 관리하지 않는다는 의미
          서버는 클라이언트가 보낸 요청에 대해 세션이나 쿠키 정보를 별도 보관하지 않음
          ->비즈니스 로직의 자유도가 높고 설계가 단순함
캐시 가능성- REST는 HTTP 표준을 그대로 사용하므로 HTTP의 캐싱 기능을 적용할 수 있음
             캐싱이 가능한 경우 클라이언트에서 캐시에 저장해두고 같은 요청에 대해서는 해당 데이터를 가져다 사용->서버의 트랜잭션 부하가 줄어 효율적. 성능 개선
레이어 시스템- 네트워크 상의 여러 계층으로 구성됨. 클라이언트는 서버와 연결되는 포인트만 알면 됨
'클라이언트-서버' 아키텍처 – REST 서버는 API를 제공하고 클라이언트는 사용자 정보를 관리하는 구조로 분리해 설계함->서로에 대한 의존성을 낮추는 기능
