<07 테스트 코드 작성하기>	
테스트 코드를 작성하는 이유
1. 문제를 개발 과정에서 미리 발견 가능
- 테스크 코드 작성 후에 테스트하는 것은 코드에 잠재된 문제 발견에 큰 도움이 됨
- 일부러 오류 발생 가능성이 있는 테스트 코드를 작성하여 예외처리가 잘 작동하는지를 확인, 정확히 의도한 비즈니스 로직에 맞춰 테스트 코드를 작성해서 결괏값이 잘 나오는지 검토
->이러한 과정들을 통해 개발단계에서 여러 테스트 코드들을 통해 애플리케이션 코드를 검증하게 됨
2. 리팩토링의 리스크 감소
- 애플리케이션 개발 이후에도 서비스 업데이트를 위해 코드 추가&수정 작업 계속 진행
3. 애플리케이션을 가동하여 직접 테스트하는 것보다 테스트를 빠르게 진행할 수 있음
4. 하나의 명세 문서로서의 기능 수행
- 개발자들은 대부분 협업을 통해 프로젝트 진행
- 협업 과정에서 다른 개발자가 작성한 코드를 이해하는 것은 쉽지 않음
- 코드 개발 후 합치는 과정에서 충돌 발생
->이러한 이유들로 명세 작성&공유 과정 필요. 이 과정에서 테스트 코드가 큰 도움
5. 몇 가지 프레임워크에 맞춰 테스트 코드를 작성하면 좋은 코드를 생산할 수 있음
6. 코드가 작성된 목적을 명확하게 표현 가능
7. 불필요한 내용이 추가되는 것 방지

단위 테스트와 통합 테스트
1. 단위 테스트
: 애플리케이션의 개별 모듈을 독립적으로 테스트하는 방식
2. 통합 테스트
: 애플리케이션을 구성하는 다양한 모듈을 결합해 전체적인 로직이 의도한 대로 동작하는지 테스트하는 방식

단위 테스트 특징
- 테스트 대상의 범위를 기준으로 가장 작은 단위의 테스트 방식
- 메서드 단위로 테스트 수행
- 메서드 호출을 통해 의도한 결괏값이 나오는지 확인하는 테스트 진행
- 드는 비용이 적어 테스트 피드백을 빠르게 받을 수 있음

통합 테스트 특징
- 모듈을 독립적으로 테스트하는 단위 테스트와 달리 여러 모듈을 함께 테스트하여 정상적인 로직 수행이 가능한지 확인
- 외부 요인들을 포함하여 테스트 진행->애플리케이션이 온전히 동작하는지 테스트 함
- 테스트 수행할때마다 모든 컴포넌트 동작->테스트 비용이 커짐
(테스트 비용이란?)
-금전적 비용 포함한 시간, 인력 등 개발에 필요한 모든 것을 포괄


<테스트 코드 작성 방법>

Given-When-Then 방법
-Given
: 테스트 수행 전, 테스트에 필요한 환경 설정 단계
-When
: 테스트의 목적 보여주는 단계
-Then
: 테스트 결과 검증 단계
-Given-When-Then 패턴은 BDD(Behavior-Driven-Development)를 통해 탄생한 테스트 접근 방식

F.I.R.S.T
-Fast(빠르게)
-Isolated(독립적)
-Repeatable(반복 가능한)
-Self-Validating(자가 검증)
-Timely(적시에)


<JUnit를 활용한 테스트 코드 작성>

JUnit의 세부 모듈
-JUnit Platform
-JUnit Jupiter
-JUnit Vintage

스프링 부트 프로젝트 생성하기
-groupId : com.springboot
-name : test
-artifiactId : test
-의존성 추가
 • Developer Tools : Lombok, Spring Configuration Processor
 • Web : Spring Web
 • SQL : Spring Data JPA, MariaDB Driver